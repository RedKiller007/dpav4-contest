
% Author: Ofir Weisse, mail: oweisse (at) umich.edu, www.ofirweisse.com
%
% MIT License
%
% Copyright (c) 2016 oweisse
%
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.


classdef MixColsCostComputer < handle
    properties
        colIdx;
        sourceStorage;
        mixColsProbabilites;
    end
    
     properties(Constant = true)
        shiftRowsMapping = [ 1  6  11 16 ...
                             5  10 15 4  ...
                             9  14 3  8  ...
                             13 2  7  12 ];
                         
        byteHammingWeights = ...
                [  0,  1,  1,  2,  1,  2,  2,  3, ...
                   1,  2,  2,  3,  2,  3,  3,  4, ...
                   1,  2,  2,  3,  2,  3,  3,  4, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   1,  2,  2,  3,  2,  3,  3,  4, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   1,  2,  2,  3,  2,  3,  3,  4, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   4,  5,  5,  6,  5,  6,  6,  7, ...
                   1,  2,  2,  3,  2,  3,  3,  4, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   4,  5,  5,  6,  5,  6,  6,  7, ...
                   2,  3,  3,  4,  3,  4,  4,  5, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   4,  5,  5,  6,  5,  6,  6,  7, ...
                   3,  4,  4,  5,  4,  5,  5,  6, ...
                   4,  5,  5,  6,  5,  6,  6,  7, ...
                   4,  5,  5,  6,  5,  6,  6,  7, ...
                   5,  6,  6,  7,  6,  7,  7,  8 ]; 
               
               
       
        hwItemCount = [ nchoosek(8,0), ...
                        nchoosek(8,1), ...
                        nchoosek(8,2), ...
                        nchoosek(8,3), ...
                        nchoosek(8,4), ...
                        nchoosek(8,5), ...
                        nchoosek(8,6), ...
                        nchoosek(8,7), ...
                        nchoosek(8,8)];
    end
    
    methods
        function obj = MixColsCostComputer( colIdx,             ...
                                            sourceStorage,     ...
                                            mixColsProbabilites ...
        )
            obj.colIdx                  = colIdx;
            obj.sourceStorage           = sourceStorage;
            obj.mixColsProbabilites     = mixColsProbabilites;
        end
        
        function [ dstValues ] = Compute( obj, srcValues )
%             plainIDs     = 1:4;
%             keyIDs       = 5:8;
%             addKeyIDs    = 9:12;
%             subBytesIDs  = 13:16;
%             shiftRowsIDs = 17:20;
%             x2_IDs       = 21:24;
%             xt_IDs       = 25:28;
%             x4_ID        = 29;
            mixCols_IDs  = 30:33;
            
            mixColVals   = srcValues( :,mixCols_IDs );
            hwVals       = obj.byteHammingWeights( mixColVals + 1 );          
            mixColsProbs = zeros( size( srcValues, 1 ), 4 );

            for rowIdx = 0:3
                byteIdx = obj.colIdx * 4 + rowIdx + 1;

                byteHW  = hwVals( :, rowIdx + 1  );
                mixColsProbs( :, rowIdx + 1 ) =                       ...
                    obj.mixColsProbabilites( byteIdx, byteHW + 1 ) ./ ...
                    obj.hwItemCount( byteHW + 1 );
                
                mixColsProbs( :, rowIdx + 1 ) =             ...
                    mixColsProbs( :, rowIdx + 1 ) /         ...
                    sum( mixColsProbs( :, rowIdx + 1 ) );
            end
  
            MULTIPLY_COLS  = 2;
            previousPrices = obj.sourceStorage.valuesPrices';
            evolvedPrices  = prod( [ previousPrices, mixColsProbs ], ...
                                   MULTIPLY_COLS                     ...
            );

            evolvedPrices = evolvedPrices / sum( evolvedPrices );
            dstValues  = [ srcValues, evolvedPrices];
        end

    end
    
end

